/*!
 * Extenso.js 2.0.1
 * Â© 2015-2019 Matheus Alves
 * License: MIT
 */
!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.extenso=n():e.extenso=n()}("undefined"!=typeof self?self:this,function(){return function(r){var t={};function a(e){if(t[e])return t[e].exports;var n=t[e]={i:e,l:!1,exports:{}};return r[e].call(n.exports,n,n.exports,a),n.l=!0,n.exports}return a.m=r,a.c=t,a.d=function(e,n,r){a.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(n,e){if(1&e&&(n=a(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(a.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var t in n)a.d(r,t,function(e){return n[e]}.bind(null,t));return r},a.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(n,"a",n),n},a.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},a.p="",a(a.s="./index.js")}({"./index.js":function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__(/*! ./src/write-all */ "./src/write-all.js").default;\n\n//# sourceURL=webpack://extenso/./index.js?')},"./node_modules/@arr/reverse/module.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__["default"] = (function (arr) {\n  if (arr == null) {\n    return [];\n  }\n\n  var i = 0,\n      len = arr.length,\n      j = len - 1;\n  var k,\n      tmp,\n      mid = len / 2 | 0; // same as Math.floor\n\n  for (; i < mid; i++) {\n    tmp = arr[i];\n    k = j - i;\n    arr[i] = arr[k];\n    arr[k] = tmp;\n  }\n\n  return arr;\n});\n\n//# sourceURL=webpack://extenso/./node_modules/@arr/reverse/module.js?')},"./node_modules/assign-deep/index.js":function(module,exports,__webpack_require__){"use strict";eval("/*!\n * assign-deep <https://github.com/jonschlinkert/assign-deep>\n *\n * Copyright (c) 2017-present, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n\nconst assignSymbols = __webpack_require__(/*! assign-symbols */ \"./node_modules/assign-deep/node_modules/assign-symbols/index.js\");\n\nconst toString = Object.prototype.toString;\n\nconst assign = module.exports = (target, ...args) => {\n  let i = 0;\n  if (isPrimitive(target)) target = args[i++];\n  if (!target) target = {};\n\n  for (; i < args.length; i++) {\n    if (isObject(args[i])) {\n      for (const key of Object.keys(args[i])) {\n        if (isObject(target[key]) && isObject(args[i][key])) {\n          assign(target[key], args[i][key]);\n        } else {\n          target[key] = args[i][key];\n        }\n      }\n\n      assignSymbols(target, args[i]);\n    }\n  }\n\n  return target;\n};\n\nfunction isObject(val) {\n  return typeof val === 'function' || toString.call(val) === '[object Object]';\n}\n\nfunction isPrimitive(val) {\n  return typeof val === 'object' ? val === null : typeof val !== 'function';\n}\n\n//# sourceURL=webpack://extenso/./node_modules/assign-deep/index.js?")},"./node_modules/assign-deep/node_modules/assign-symbols/index.js":function(module,exports,__webpack_require__){"use strict";eval("/*!\n * assign-symbols <https://github.com/jonschlinkert/assign-symbols>\n *\n * Copyright (c) 2015-present, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n\nconst toString = Object.prototype.toString;\nconst isEnumerable = Object.prototype.propertyIsEnumerable;\nconst getSymbols = Object.getOwnPropertySymbols;\n\nmodule.exports = (target, ...args) => {\n  if (!isObject(target)) {\n    throw new TypeError('expected the first argument to be an object');\n  }\n\n  if (args.length === 0 || typeof Symbol !== 'function' || typeof getSymbols !== 'function') {\n    return target;\n  }\n\n  for (let arg of args) {\n    let names = getSymbols(arg);\n\n    for (let key of names) {\n      if (isEnumerable.call(arg, key)) {\n        target[key] = arg[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction isObject(val) {\n  return typeof val === 'function' || toString.call(val) === '[object Object]' || Array.isArray(val);\n}\n\n//# sourceURL=webpack://extenso/./node_modules/assign-deep/node_modules/assign-symbols/index.js?")},"./node_modules/format-number/index.js":function(module,exports){eval("module.exports = formatter;\nmodule.exports.default = formatter;\n\nfunction formatter(options) {\n  options = options || {}; // *********************************************************************************************\n  // Set defaults for negatives\n  // options.negative, options.negativeOut, options.separator retained for backward compatibility\n  // *********************************************************************************************\n  // type of negative; default left\n\n  options.negativeType = options.negativeType || (options.negative === 'R' ? 'right' : 'left'); // negative symbols '-' or '()'\n\n  if (typeof options.negativeLeftSymbol !== 'string') {\n    switch (options.negativeType) {\n      case 'left':\n        options.negativeLeftSymbol = '-';\n        break;\n\n      case 'brackets':\n        options.negativeLeftSymbol = '(';\n        break;\n\n      default:\n        options.negativeLeftSymbol = '';\n    }\n  }\n\n  if (typeof options.negativeRightSymbol !== 'string') {\n    switch (options.negativeType) {\n      case 'right':\n        options.negativeRightSymbol = '-';\n        break;\n\n      case 'brackets':\n        options.negativeRightSymbol = ')';\n        break;\n\n      default:\n        options.negativeRightSymbol = '';\n    }\n  } // whether negative symbol should be inside/outside prefix and suffix\n\n\n  if (typeof options.negativeLeftOut !== \"boolean\") {\n    options.negativeLeftOut = options.negativeOut === false ? false : true;\n  }\n\n  if (typeof options.negativeRightOut !== \"boolean\") {\n    options.negativeRightOut = options.negativeOut === false ? false : true;\n  } //prefix and suffix\n\n\n  options.prefix = options.prefix || '';\n  options.suffix = options.suffix || ''; //separators\n\n  if (typeof options.integerSeparator !== 'string') {\n    options.integerSeparator = typeof options.separator === 'string' ? options.separator : ',';\n  }\n\n  options.decimalsSeparator = typeof options.decimalsSeparator === 'string' ? options.decimalsSeparator : '';\n  options.decimal = options.decimal || '.'; //padders\n\n  options.padLeft = options.padLeft || -1; //default no padding\n\n  options.padRight = options.padRight || -1; //default no padding\n\n  function format(number, overrideOptions) {\n    overrideOptions = overrideOptions || {};\n\n    if (number || number === 0) {\n      number = '' + number; //convert number to string if it isn't already\n    } else {\n      return '';\n    } //identify a negative number and make it absolute\n\n\n    var output = [];\n    var negative = number.charAt(0) === '-';\n    number = number.replace(/^\\-/g, ''); //Prepare output with left hand negative and/or prefix\n\n    if (!options.negativeLeftOut && !overrideOptions.noUnits) {\n      output.push(options.prefix);\n    }\n\n    if (negative) {\n      output.push(options.negativeLeftSymbol);\n    }\n\n    if (options.negativeLeftOut && !overrideOptions.noUnits) {\n      output.push(options.prefix);\n    } //Format core number\n\n\n    number = number.split('.');\n    if (options.round != null) round(number, options.round);\n    if (options.truncate != null) number[1] = truncate(number[1], options.truncate);\n    if (options.padLeft > 0) number[0] = padLeft(number[0], options.padLeft);\n    if (options.padRight > 0) number[1] = padRight(number[1], options.padRight);\n    if (!overrideOptions.noSeparator && number[1]) number[1] = addDecimalSeparators(number[1], options.decimalsSeparator);\n    if (!overrideOptions.noSeparator && number[0]) number[0] = addIntegerSeparators(number[0], options.integerSeparator);\n    output.push(number[0]);\n\n    if (number[1]) {\n      output.push(options.decimal);\n      output.push(number[1]);\n    } //Prepare output with right hand negative and/or prefix\n\n\n    if (options.negativeRightOut && !overrideOptions.noUnits) {\n      output.push(options.suffix);\n    }\n\n    if (negative) {\n      output.push(options.negativeRightSymbol);\n    }\n\n    if (!options.negativeRightOut && !overrideOptions.noUnits) {\n      output.push(options.suffix);\n    } //join output and return\n\n\n    return output.join('');\n  }\n\n  format.negative = options.negative;\n  format.negativeOut = options.negativeOut;\n  format.negativeType = options.negativeType;\n  format.negativeLeftOut = options.negativeLeftOut;\n  format.negativeLeftSymbol = options.negativeLeftSymbol;\n  format.negativeRightOut = options.negativeRightOut;\n  format.negativeRightSymbol = options.negativeRightSymbol;\n  format.prefix = options.prefix;\n  format.suffix = options.suffix;\n  format.separate = options.separate;\n  format.integerSeparator = options.integerSeparator;\n  format.decimalsSeparator = options.decimalsSeparator;\n  format.decimal = options.decimal;\n  format.padLeft = options.padLeft;\n  format.padRight = options.padRight;\n  format.truncate = options.truncate;\n  format.round = options.round;\n\n  function unformat(number, allowedSeparators) {\n    allowedSeparators = allowedSeparators || [];\n\n    if (options.allowedSeparators) {\n      options.allowedSeparators.forEach(function (s) {\n        allowedSeparators.push(s);\n      });\n    }\n\n    allowedSeparators.push(options.integerSeparator);\n    allowedSeparators.push(options.decimalsSeparator);\n    number = number.replace(options.prefix, '');\n    number = number.replace(options.suffix, '');\n    var newNumber = number;\n\n    do {\n      number = newNumber;\n\n      for (var i = 0; i < allowedSeparators.length; i++) {\n        newNumber = newNumber.replace(allowedSeparators[i], '');\n      }\n    } while (newNumber != number);\n\n    return number;\n  }\n\n  format.unformat = unformat;\n\n  function validate(number, allowedSeparators) {\n    number = unformat(number, allowedSeparators);\n    number = number.split(options.decimal);\n\n    if (number.length > 2) {\n      return false;\n    } else if (options.truncate != null && number[1] && number[1].length > options.truncate) {\n      return false;\n    } else if (options.round != null && number[1] && number[1].length > options.round) {\n      return false;\n    } else {\n      return /^-?\\d+\\.?\\d*$/.test(number);\n    }\n  }\n\n  return format;\n} //where x is already the integer part of the number\n\n\nfunction addIntegerSeparators(x, separator) {\n  x += '';\n  if (!separator) return x;\n  var rgx = /(\\d+)(\\d{3})/;\n\n  while (rgx.test(x)) {\n    x = x.replace(rgx, '$1' + separator + '$2');\n  }\n\n  return x;\n} //where x is already the decimal part of the number\n\n\nfunction addDecimalSeparators(x, separator) {\n  x += '';\n  if (!separator) return x;\n  var rgx = /(\\d{3})(\\d+)/;\n\n  while (rgx.test(x)) {\n    x = x.replace(rgx, '$1' + separator + '$2');\n  }\n\n  return x;\n} //where x is the integer part of the number\n\n\nfunction padLeft(x, padding) {\n  x = x + '';\n  var buf = [];\n\n  while (buf.length + x.length < padding) {\n    buf.push('0');\n  }\n\n  return buf.join('') + x;\n} //where x is the decimals part of the number\n\n\nfunction padRight(x, padding) {\n  if (x) {\n    x += '';\n  } else {\n    x = '';\n  }\n\n  var buf = [];\n\n  while (buf.length + x.length < padding) {\n    buf.push('0');\n  }\n\n  return x + buf.join('');\n}\n\nfunction truncate(x, length) {\n  if (x) {\n    x += '';\n  }\n\n  if (x && x.length > length) {\n    return x.substr(0, length);\n  } else {\n    return x;\n  }\n} //where number is an array with 0th item as integer string and 1st item as decimal string (no negatives)\n\n\nfunction round(number, places) {\n  if (number[1] && places >= 0 && number[1].length > places) {\n    //truncate to correct number of decimal places\n    var decim = number[1].slice(0, places); //if next digit was >= 5 we need to round up\n\n    if (+number[1].substr(places, 1) >= 5) {\n      //But first count leading zeros as converting to a number will loose them\n      var leadingzeros = \"\";\n\n      while (decim.charAt(0) === \"0\") {\n        leadingzeros = leadingzeros + \"0\";\n        decim = decim.substr(1);\n      } //Then we can change decim to a number and add 1 before replacing leading zeros\n\n\n      decim = +decim + 1 + '';\n      decim = leadingzeros + decim;\n\n      if (decim.length > places) {\n        //adding one has made it longer\n        number[0] = +number[0] + +decim.charAt(0) + ''; //add value of firstchar to the integer part\n\n        decim = decim.substring(1); //ignore the 1st char at the beginning which is the carry to the integer part\n      }\n    }\n\n    number[1] = decim;\n  }\n\n  return number;\n}\n\n//# sourceURL=webpack://extenso/./node_modules/format-number/index.js?")},"./src/get-list.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"listLt10\", function() { return listLt10; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"listLt100\", function() { return listLt100; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"listLt1000\", function() { return listLt1000; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"listGt1000\", function() { return listGt1000; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"listDecimals\", function() { return listDecimals; });\n/**\r\n * Obter lista de nÃºmeros menores que dez.\r\n *\r\n * @method listLt10\r\n * @param {string} locale CÃ³digo do paÃ­s que deve ser escrito.\r\n * @returns {Array} Lista das partes do nÃºmero.\r\n */\nvar listLt10 = function listLt10(locale) {\n  return ['zero', 'um', 'dois', 'trÃªs', 'quatro', 'cinco', 'seis', 'sete', 'oito', 'nove'];\n};\n/**\r\n * Obter lista de nÃºmeros menores que cem.\r\n *\r\n * @method listLt100\r\n * @param {string} locale CÃ³digo do paÃ­s que deve ser escrito.\r\n * @returns {Array} Lista das partes do nÃºmero.\r\n */\n\nvar listLt100 = function listLt100(locale) {\n  return ['dez', 'onze', 'doze', 'treze', {\n    br: 'quatorze',\n    pt: 'catorze'\n  }[locale], 'quinze', {\n    br: 'dezesseis',\n    pt: 'dezasseis'\n  }[locale], {\n    br: 'dezessete',\n    pt: 'dezassete'\n  }[locale], 'dezoito', {\n    br: 'dezenove',\n    pt: 'dezanove'\n  }[locale], 'vinte', 'trinta', 'quarenta', 'cinquenta', 'sessenta', 'setenta', 'oitenta', 'noventa'];\n};\n/**\r\n * Obter lista de nÃºmeros menores que mil.\r\n *\r\n * @method listLt1000\r\n * @param {string} locale CÃ³digo do paÃ­s que deve ser escrito.\r\n * @returns {Array} Lista das partes do nÃºmero.\r\n */\n\nvar listLt1000 = function listLt1000(locale) {\n  return ['cento', 'duzentos', 'trezentos', 'quatrocentos', 'quinhentos', 'seiscentos', 'setecentos', 'oitocentos', 'novecentos'];\n};\n/**\r\n * Obter lista de nÃºmeros maiores que mil.\r\n *\r\n * @method listGt1000\r\n * @param {string} locale CÃ³digo do paÃ­s que deve ser escrito.\r\n * @returns {Array} Lista das partes do nÃºmero.\r\n */\n\nvar listGt1000 = function listGt1000(locale) {\n  return ['mil', 'milhÃµes', {\n    br: 'bilhÃµes',\n    pt: 'biliÃµes'\n  }[locale], {\n    br: 'trilhÃµes',\n    pt: 'triliÃµes'\n  }[locale], {\n    br: 'quatrilhÃµes',\n    pt: 'quatriliÃµes'\n  }[locale], {\n    br: 'quintilhÃµes',\n    pt: 'quintiliÃµes'\n  }[locale], {\n    br: 'sextilhÃµes',\n    pt: 'sextiliÃµes'\n  }[locale], {\n    br: 'septilhÃµes',\n    pt: 'septiliÃµes'\n  }[locale], {\n    br: 'octilhÃµes',\n    pt: 'octiliÃµes'\n  }[locale], {\n    br: 'nonilhÃµes',\n    pt: 'noniliÃµes'\n  }[locale], {\n    br: 'decilhÃµes',\n    pt: 'deciliÃµes'\n  }[locale], {\n    br: 'undecilhÃµes',\n    pt: 'undeciliÃµes'\n  }[locale], {\n    br: 'duodecilhÃµes',\n    pt: 'duodeciliÃµes'\n  }[locale]];\n};\n/**\r\n * Obter lista de nÃºmeros decimais.\r\n *\r\n * @method listDecimals\r\n * @param {string} locale CÃ³digo do paÃ­s que deve ser escrito.\r\n * @returns {Array} Lista das partes do nÃºmero.\r\n */\n\nvar listDecimals = function listDecimals(locale) {\n  return ['milÃ©simo', 'milionÃ©simo', 'bilionÃ©simo', 'trilionÃ©simo', 'quatrilionÃ©simo', 'quintilionÃ©simo', 'sextilionÃ©simo', 'septilionÃ©simo', 'octilionÃ©simo', 'nonilionÃ©simo', 'decilionÃ©simo', 'undecilionÃ©simo', 'duodecilionÃ©simo'];\n};\n\n//# sourceURL=webpack://extenso/./src/get-list.js?")},"./src/gt1000/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _int_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./int-util */ "./src/gt1000/int-util.js");\n/* harmony import */ var _parts_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parts-util */ "./src/gt1000/parts-util.js");\n\n\n/**\r\n * Escrever nÃºmeros maiores que mil.\r\n *\r\n * @function gt1000\r\n * @param {string} int NÃºmero inteiro maior que mil.\r\n * @param {string} locale CÃ³digo do paÃ­s para escrever o nÃºmero.\r\n * @returns {number} Valor escrito por extenso.\r\n */\n\n/* harmony default export */ __webpack_exports__["default"] = (function (int, locale) {\n  var number = Object(_parts_util__WEBPACK_IMPORTED_MODULE_1__["write"])(Object(_parts_util__WEBPACK_IMPORTED_MODULE_1__["addComma"])(Object(_parts_util__WEBPACK_IMPORTED_MODULE_1__["addConjunction"])(Object(_parts_util__WEBPACK_IMPORTED_MODULE_1__["singularize"])(Object(_parts_util__WEBPACK_IMPORTED_MODULE_1__["clear"])(Object(_parts_util__WEBPACK_IMPORTED_MODULE_1__["name"])(Object(_int_util__WEBPACK_IMPORTED_MODULE_0__["split"])(int), locale))), int)), locale);\n  return number.join(\' \');\n});\n\n//# sourceURL=webpack://extenso/./src/gt1000/index.js?')},"./src/gt1000/int-util.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "split", function() { return split; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLastNumber", function() { return getLastNumber; });\n/* harmony import */ var format_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! format-number */ "./node_modules/format-number/index.js");\n/* harmony import */ var format_number__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(format_number__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\r\n * Separar um inteiro em uma array com base na formataÃ§Ã£o de um nÃºmero.\r\n *\r\n * @method split\r\n * @param {string} int NÃºmero inteiro.\r\n * @returns {Array} Array com as partes do nÃºmero.\r\n */\n\nvar split = function split(int) {\n  var format = format_number__WEBPACK_IMPORTED_MODULE_0___default()();\n  var formatted = format(int);\n  var splitted = formatted.split(\',\');\n  return splitted;\n};\n/**\r\n * Obter a Ãºltima parte de um nÃºmero.\r\n *\r\n * @method getLastNumber\r\n * @param {string} int NÃºmero inteiro.\r\n * @returns {number} Ãltima parte do nÃºmero.\r\n */\n\nvar getLastNumber = function getLastNumber(int) {\n  var splitted = split(int);\n  var last = splitted[splitted.length - 1];\n  var integer = parseInt(last);\n  return integer;\n};\n\n//# sourceURL=webpack://extenso/./src/gt1000/int-util.js?')},"./src/gt1000/parts-util.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addComma", function() { return addComma; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addConjunction", function() { return addConjunction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clear", function() { return clear; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "name", function() { return name; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "singularize", function() { return singularize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "write", function() { return write; });\n/* harmony import */ var _arr_reverse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @arr/reverse */ "./node_modules/@arr/reverse/module.js");\n/* harmony import */ var _int_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./int-util */ "./src/gt1000/int-util.js");\n/* harmony import */ var _get_list__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../get-list */ "./src/get-list.js");\n/* harmony import */ var _lt1000__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lt1000 */ "./src/lt1000.js");\n\n\n\n\n/**\r\n * Adicionar vÃ­rgula entre algumas partes.\r\n *\r\n * @method addComma\r\n * @param {Array} parts Array com as partes.\r\n * @returns {Array} Partes com a vÃ­rgula caso tenho sido necessÃ¡rio.\r\n */\n\nvar addComma = function addComma(parts) {\n  return parts.map(function (part, index, array) {\n    // REGRA: NÃ£o adiciona entre a penÃºltima e a Ãºltima parte.\n    return index < array.length - 2 ? "".concat(part, ",") : part;\n  });\n};\n/**\r\n * Adicionar conjunÃ§Ã£o "e" em determinadas partes.\r\n *\r\n * @method addConjunction\r\n * @param {Array} parts Partes do nÃºmero que estÃ¡ sendo processado.\r\n * @param {string} int NÃºmero inteiro que estÃ¡ sendo processado.\r\n * @returns {Array} Partes com a conjuÃ§Ã£o "e" caso tenha sido necessÃ¡rio.\r\n */\n\nvar addConjunction = function addConjunction(parts, int) {\n  var lastNum = Object(_int_util__WEBPACK_IMPORTED_MODULE_1__["getLastNumber"])(int); // A parte Ã© valida apenas se:\n  // - Caso 1: A parte Ã© um inteiro menor que cem.\n  // - Caso 2: A parte Ã© um inteiro divisÃ­vel por cem.\n\n  if (lastNum < 100 || lastNum % 100 === 0) {\n    return parts.map(function (part, index, array) {\n      return index === array.length - 2 ? "".concat(part, " e") : part;\n    });\n  }\n\n  return parts;\n};\n/**\r\n * Limpar partes que nÃ£o sÃ£o lidas no nÃºmero.\r\n *\r\n * @method clear\r\n * @param {Array} parts Partes do nÃºmero que estÃ¡ sendo processado.\r\n * @returns {Array} Partes com algumas partes removidas.\r\n */\n\nvar clear = function clear(parts) {\n  // Etapas para a remoÃ§Ã£o:\n  // - Etapa 1: Remove zeros Ã  esquerda.\n  // - Etapa 2: Remove partes que nÃ£o sÃ£o lidas.\n  // - Etapa 3: Remove o "1" das partes com "1 mil".\n  return parts.map(function (part) {\n    return part.replace(/^0+\\s?/, \'\');\n  }).filter(function (part) {\n    return /^\\d/.test(part);\n  }).map(function (part) {\n    return part.replace(/^1\\s(mil)$/, \'$1\');\n  });\n};\n/**\r\n * Escrever por extenso os nÃºmeros inteiros dentro das partes.\r\n *\r\n * @method name\r\n * @param {Array} parts Partes do nÃºmero que estÃ¡ sendo processado.\r\n * @param {string} locale CÃ³digo do paÃ­s para escrever o nÃºmero.\r\n * @returns {Array} Partes com os inteiros escritos por extenso.\r\n */\n\nvar name = function name(parts, locale) {\n  return Object(_arr_reverse__WEBPACK_IMPORTED_MODULE_0__["default"])(Object(_arr_reverse__WEBPACK_IMPORTED_MODULE_0__["default"])(parts).map(function (part, i) {\n    var numberName = Object(_get_list__WEBPACK_IMPORTED_MODULE_2__["listGt1000"])(locale)[i - 1];\n    return numberName ? "".concat(part, " ").concat(numberName) : part;\n  }));\n};\n/**\r\n * Singularizar partes do nÃºmero que sÃ£o maiores que um.\r\n *\r\n * @method singularize\r\n * @param {Array} parts Partes do nÃºmero que estÃ¡ sendo processado.\r\n * @returns {string} NÃºmero com as partes singularizadas.\r\n */\n\nvar singularize = function singularize(parts) {\n  var regex = /^(1\\s.*)Ãµes/;\n\n  var replacer = function replacer(str) {\n    return str.replace(regex, \'$1Ã£o\');\n  };\n\n  return parts.map(replacer);\n};\n/**\r\n * Deve escrever os inteiros restantes em uma array com as partes.\r\n *\r\n * @method write\r\n * @param {Array} parts Partes do nÃºmero que estÃ¡ sendo processado.\r\n * @param {string} locale CÃ³digo do paÃ­s para escrever o nÃºmero.\r\n * @returns {string} NÃºmero como todas as partes escritas por extenso.\r\n */\n\nvar write = function write(parts, locale) {\n  return parts.map(function (part) {\n    return part.replace(/^(\\d+)/, function (digit) {\n      var int = parseInt(digit);\n      return Object(_lt1000__WEBPACK_IMPORTED_MODULE_3__["default"])(int, locale);\n    });\n  });\n};\n\n//# sourceURL=webpack://extenso/./src/gt1000/parts-util.js?')},"./src/lt10.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _get_list__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./get-list */ "./src/get-list.js");\n\n/**\r\n * Obter um nÃºmero inteiro menor que dez por extenso.\r\n *\r\n * @function lt10\r\n * @param {number} int Um nÃºmero inteiro menor que dez.\r\n * @param {string} locale CÃ³digo do paÃ­s para escrever o nÃºmero.\r\n * @returns {string} O nÃºmero por extenso.\r\n */\n\n/* harmony default export */ __webpack_exports__["default"] = (function (int, locale) {\n  return Object(_get_list__WEBPACK_IMPORTED_MODULE_0__["listLt10"])(locale)[int];\n});\n\n//# sourceURL=webpack://extenso/./src/lt10.js?')},"./src/lt100.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lt10__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lt10 */ "./src/lt10.js");\n/* harmony import */ var _get_list__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./get-list */ "./src/get-list.js");\n\n\n/**\r\n * Obter um nÃºmero inteiro menor que cem por extenso.\r\n *\r\n * @function lt100\r\n * @param {number} int Um nÃºmero inteiro menor que cem.\r\n * @param {string} locale CÃ³digo do paÃ­s para escrever o nÃºmero.\r\n * @returns {string} O nÃºmero escrito por extenso.\r\n */\n\n/* harmony default export */ __webpack_exports__["default"] = (function (int, locale) {\n  if (int < 10) return Object(_lt10__WEBPACK_IMPORTED_MODULE_0__["default"])(int, locale);\n  if (int < 20) return Object(_get_list__WEBPACK_IMPORTED_MODULE_1__["listLt100"])(locale)[int - 10];\n  var unit = Object(_lt10__WEBPACK_IMPORTED_MODULE_0__["default"])(int % 10, locale);\n  var ten = Object(_get_list__WEBPACK_IMPORTED_MODULE_1__["listLt100"])(locale)[(int - int % 10) / 10 + 8];\n  return unit !== \'zero\' ? "".concat(ten, " e ").concat(unit) : ten;\n});\n\n//# sourceURL=webpack://extenso/./src/lt100.js?')},"./src/lt1000.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _get_list__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./get-list */ "./src/get-list.js");\n/* harmony import */ var _lt100__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lt100 */ "./src/lt100.js");\n\n\n/**\r\n * Obter um nÃºmero inteiro menor que mil por extenso.\r\n *\r\n * @function lt1000\r\n * @param {number} int Um nÃºmero inteiro menor que mil.\r\n * @param {string} locale CÃ³digo do paÃ­s para escrever o nÃºmero.\r\n * @returns {string} NÃºmero escrito por extenso.\r\n */\n\n/* harmony default export */ __webpack_exports__["default"] = (function (int, locale) {\n  if (int < 100) return Object(_lt100__WEBPACK_IMPORTED_MODULE_1__["default"])(int, locale);\n  if (int === 100) return \'cem\';\n  var hundredInt = int - int % 100;\n  var restInt = int % 100;\n  var hundred = Object(_get_list__WEBPACK_IMPORTED_MODULE_0__["listLt1000"])(locale)[hundredInt / 100 - 1];\n  var rest = Object(_lt100__WEBPACK_IMPORTED_MODULE_1__["default"])(restInt, locale);\n  return restInt ? "".concat(hundred, " e ").concat(rest) : hundred;\n});\n\n//# sourceURL=webpack://extenso/./src/lt1000.js?')},"./src/num-util.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isValidNumber\", function() { return isValidNumber; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parseNumber\", function() { return parseNumber; });\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/**\r\n * Verificar se um valor Ã© um nÃºmero, da lÃ­ngua portuguesa, valido.\r\n *\r\n * @method isValidNumber\r\n * @param {string} val Um valor para ser verificado.\r\n * @returns {boolean} VerificaÃ§Ã£o do valor.\r\n */\nvar isValidNumber = function isValidNumber(val) {\n  if (typeof val === 'number' && !Number.isSafeInteger(val)) {\n    return false;\n  } // Verifica se Ã© um nÃºmero\n\n\n  if (/^-?\\d{1,3}\\d?((\\.\\d{3})+)?$/.test(val) // ...formatado\n  || /^-?\\d{1,3}\\d?((\\.\\d{3})+)?,\\d+$/.test(val) // ...decimal formatado\n  || /^-?\\d+$/.test(val) // ...nÃ£o formatado\n  || /^-?\\d+,\\d+/.test(val) // ...decimal nÃ£o formatado\n  ) {\n      return true;\n    }\n\n  return false;\n};\n/**\r\n * Analisar um nÃºmero.\r\n *\r\n * @method parseNumber\r\n * @param {string} val Um nÃºmero para ser analisado\r\n * @returns {object} Objeto com as informaÃ§Ãµes do nÃºmero\r\n */\n\nvar parseNumber = function parseNumber(num) {\n  var isNegative = /^-/.test(num);\n  var normalized = num.replace(/(-|\\.)/g, '');\n\n  if (normalized.includes(',')) {\n    var _normalized$split$map = normalized.split(',').map(function (val) {\n      return val.replace(/^0+$/, '0');\n    }),\n        _normalized$split$map2 = _slicedToArray(_normalized$split$map, 2),\n        integer = _normalized$split$map2[0],\n        decimal = _normalized$split$map2[1];\n\n    return {\n      isNegative: isNegative,\n      integer: integer,\n      decimal: decimal\n    };\n  }\n\n  return {\n    isNegative: isNegative,\n    integer: normalized,\n    decimal: '0'\n  };\n};\n\n//# sourceURL=webpack://extenso/./src/num-util.js?")},"./src/write-all.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isValidOpt\", function() { return isValidOpt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toNegative\", function() { return toNegative; });\n/* harmony import */ var assign_deep__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! assign-deep */ \"./node_modules/assign-deep/index.js\");\n/* harmony import */ var assign_deep__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(assign_deep__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _num_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./num-util */ \"./src/num-util.js\");\n/* harmony import */ var _write_currency__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./write-currency */ \"./src/write-currency/index.js\");\n/* harmony import */ var _write_decimal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./write-decimal */ \"./src/write-decimal/index.js\");\n/* harmony import */ var _write_int__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./write-int */ \"./src/write-int.js\");\n\n\n\n\n\n/**\r\n * Verificar se uma opÃ§Ã£o Ã© vÃ¡lida.\r\n *\r\n * @method isValidOpt\r\n * @param {string} val Valor da opÃ§Ã£o.\r\n * @param {Array} vals Valores para checagem.\r\n * @returns {boolean} InformaÃ§Ã£o da validade da opÃ§Ã£o.\r\n */\n\nvar isValidOpt = function isValidOpt(val, vals) {\n  return vals.includes(val);\n};\n/**\r\n * Passar um nÃºmero escrito por extenso para o modo negativo.\r\n *\r\n * @method toNegative\r\n * @param {string} num Valor escrito por extenso.\r\n * @param {string} [mode='formal'] OpÃ§Ã£o sobre o modo a ser escrito.\r\n * @returns {string} Valor como negativo.\r\n */\n\nvar toNegative = function toNegative(num) {\n  var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'formal';\n  return mode === 'informal' ? \"menos \".concat(num) : \"\".concat(num, \" negativo\");\n};\n/**\r\n * Escrever nÃºmeros por extenso.\r\n *\r\n * @param {string|number} num NÃºmero para ser escrito por extenso.\r\n * @param {object} opts OpÃ§Ãµes para configurar modo de escrita.\r\n * @returns {string} NÃºmero escrito por extenso.\r\n */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (function (num, opts) {\n  if (typeof num !== 'string' && typeof num !== 'number') {\n    throw new TypeError('Must be a string or a number');\n  }\n\n  var numString = num.toString();\n\n  if (!Object(_num_util__WEBPACK_IMPORTED_MODULE_1__[\"isValidNumber\"])(numString)) {\n    throw new Error('Invalid number');\n  }\n\n  var defaultOpts = {\n    mode: 'number',\n    locale: 'br',\n    negative: 'formal',\n    currency: {\n      type: 'BRL'\n    },\n    number: {\n      gender: 'm',\n      decimal: 'formal'\n    } // Usando o pacote 'assign-deep' no lugar de Object.assign(),\n    // pois esse Ãºltimo substitui completamente todas as propriedades\n    // de um objeto que estÃ¡ dentro de outro objeto.\n\n  };\n  opts = assign_deep__WEBPACK_IMPORTED_MODULE_0___default()(defaultOpts, opts);\n\n  if (!isValidOpt(opts.mode, ['number', 'currency']) || !isValidOpt(opts.locale, ['pt', 'br']) || !isValidOpt(opts.negative, ['formal', 'informal']) || !isValidOpt(opts.currency.type, ['BRL', 'EUR']) || !isValidOpt(opts.number.gender, ['m', 'f']) || !isValidOpt(opts.number.decimal, ['formal', 'informal'])) {\n    throw new Error('Invalid option');\n  }\n\n  var _parseNumber = Object(_num_util__WEBPACK_IMPORTED_MODULE_1__[\"parseNumber\"])(numString),\n      isNegative = _parseNumber.isNegative,\n      integer = _parseNumber.integer,\n      decimal = _parseNumber.decimal;\n\n  if (opts.mode === 'currency') {\n    var iso = opts.currency.type;\n    var locale = opts.locale;\n    var numText = Object(_write_currency__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(iso, locale, integer, decimal);\n    return isNegative ? toNegative(numText, opts.negative) : numText;\n  }\n\n  if (opts.mode === 'number') {\n    var intNameSingular = opts.number.gender === 'f' ? 'inteira' : 'inteiro';\n    var intName = parseInt(integer) === 1 ? intNameSingular : \"\".concat(intNameSingular, \"s\");\n    var intText = Object(_write_int__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(integer, opts.locale, opts.number.gender);\n    var decText = Object(_write_decimal__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(decimal, opts.locale, opts.number.decimal); // Se tem a parte inteira e nÃ£o tem a parte decimal\n\n    if (integer !== '0' && decimal === '0') {\n      return isNegative ? toNegative(intText, opts.negative) : intText;\n    } // Se nÃ£o tem a parte inteira e tem a parte decimal\n\n\n    if (integer === '0' && decimal !== '0') {\n      var number = opts.number.decimal === 'informal' ? \"zero \".concat(decText) : decText;\n      return isNegative ? toNegative(number, opts.negative) : number;\n    } // Se tem a parte inteira e a parte decimal\n\n\n    if (integer !== '0' && decimal !== '0') {\n      if (opts.number.decimal === 'informal') {\n        return \"\".concat(intText, \" \").concat(decText);\n      }\n\n      var _numText = \"\".concat(intText, \" \").concat(intName, \" e \").concat(decText);\n\n      return isNegative ? toNegative(_numText, opts.negative) : _numText;\n    }\n  }\n});\n\n//# sourceURL=webpack://extenso/./src/write-all.js?")},"./src/write-currency/currencies.json":function(module){eval('module.exports = {"BRL":{"singular":"real","plural":"reais","subunit":{"singular":"centavo","plural":"centavos"}},"EUR":{"singular":"euro","plural":"euros","subunit":{"singular":"cÃªntimo","plural":"cÃªntimos"}}};\n\n//# sourceURL=webpack://extenso/./src/write-currency/currencies.json?')},"./src/write-currency/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getIsos", function() { return getIsos; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isValidIso", function() { return isValidIso; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isZero", function() { return isZero; });\n/* harmony import */ var _currencies_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./currencies.json */ "./src/write-currency/currencies.json");\nvar _currencies_json__WEBPACK_IMPORTED_MODULE_0___namespace = /*#__PURE__*/__webpack_require__.t(/*! ./currencies.json */ "./src/write-currency/currencies.json", 1);\n/* harmony import */ var _write__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./write */ "./src/write-currency/write.js");\n/* harmony import */ var _write_subunit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./write-subunit */ "./src/write-currency/write-subunit.js");\n\n\n\n/**\r\n * Obter lista dos cÃ³digos ISO de um registro de moedas.\r\n *\r\n * @method getIsos\r\n * @param {object} currencies Objeto com registro de moedas.\r\n * @returns {Array} Lista com os cÃ³digos ISO.\r\n */\n\nvar getIsos = function getIsos(currencies) {\n  return Object.keys(currencies);\n};\n/**\r\n * Verificar se hÃ¡ um cÃ³digo ISO registrado.\r\n *\r\n * @method isValidIso\r\n * @param {string} iso CÃ³digo ISO para ser verificado.\r\n * @param {object} currencies Objeto com registro de moedas.\r\n * @returns {boolean} InformaÃ§Ã£o da existÃªncia do registro.\r\n */\n\nvar isValidIso = function isValidIso(iso, currencies) {\n  return getIsos(currencies).includes(iso);\n};\n/**\r\n * Verificar se um nÃºmero, envolvido em string, Ã© igual a zero.\r\n *\r\n * @method isZero\r\n * @param {string} val NÃºmero envolvido numa string.\r\n * @returns {boolean} InformaÃ§Ã£o do valor.\r\n * @example\r\n * isZero(\'00\') // true\r\n * isZero(\'42\') // false\r\n */\n\nvar isZero = function isZero(val) {\n  return /^0+$/.test(val);\n};\n/**\r\n * Obter um valor monetÃ¡rio escrito por extenso.\r\n *\r\n * @method writeCurrency\r\n * @param {string} iso CÃ³digo ISO da moeda que deverÃ¡ ser usada.\r\n * @param {string} locale CÃ³digo do paÃ­s para escrever o nÃºmero.\r\n * @param {string} [unit=\'0\'] Valor da moeda (parte inteira).\r\n * @param {string} [subunit=\'0\'] Sub-unidade do valor (parte "decimal").\r\n * @returns {string} Valor escrito por extenso.\r\n */\n\n/* harmony default export */ __webpack_exports__["default"] = (function (iso, locale) {\n  var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \'0\';\n  var subunit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \'0\';\n\n  if (!isValidIso(iso, _currencies_json__WEBPACK_IMPORTED_MODULE_0__)) {\n    throw new Error(\'Invalid ISO code\');\n  }\n\n  var opts = _currencies_json__WEBPACK_IMPORTED_MODULE_0__[iso];\n  var unitText = Object(_write__WEBPACK_IMPORTED_MODULE_1__["default"])(unit, locale, opts);\n  var subunitText = Object(_write_subunit__WEBPACK_IMPORTED_MODULE_2__["default"])(subunit, locale, opts);\n  if (isZero(unit)) return subunitText;\n  if (isZero(subunit)) return unitText;\n  if (isZero(unit) && isZero(subunit)) return "zero ".concat(opts.plural);\n  return "".concat(unitText, " e ").concat(subunitText);\n});\n\n//# sourceURL=webpack://extenso/./src/write-currency/index.js?')},"./src/write-currency/write-subunit.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _write_int__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../write-int */ "./src/write-int.js");\n\n/**\r\n * Obter a sub-unidade escrita por extenso.\r\n *\r\n * @method writeSubunit\r\n * @param {string} val Valor a ser escrito.\r\n * @param {string} locale CÃ³digo do paÃ­s para escrever o nÃºmero.\r\n * @param {object} opts OpÃ§Ãµes de escrita do valor.\r\n * @returns {string} Valor escrito por extenso.\r\n */\n\n/* harmony default export */ __webpack_exports__["default"] = (function (val, locale, opts) {\n  var textNumber = Object(_write_int__WEBPACK_IMPORTED_MODULE_0__["default"])(val, locale);\n  return parseInt(val) === 1 ? "".concat(textNumber, " ").concat(opts.subunit.singular) : "".concat(textNumber, " ").concat(opts.subunit.plural);\n});\n\n//# sourceURL=webpack://extenso/./src/write-currency/write-subunit.js?')},"./src/write-currency/write.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _write_int__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../write-int */ "./src/write-int.js");\n\n/**\r\n * Obter o valor escrito por extenso.\r\n *\r\n * @method write\r\n * @param {string} val O valor a ser escrito.\r\n * @param {string} locale CÃ³digo do paÃ­s para escrever o nÃºmero.\r\n * @param {object} opts As opÃ§Ãµes de escrita do valor.\r\n * @returns {string} O valor escrito por extenso.\r\n */\n\n/* harmony default export */ __webpack_exports__["default"] = (function (val, locale, opts) {\n  var number = parseInt(val);\n  var text = Object(_write_int__WEBPACK_IMPORTED_MODULE_0__["default"])(val, locale);\n  if (number === 1) return "".concat(text, " ").concat(opts.singular);\n  if (number >= 1e+6) return "".concat(text, " de ").concat(opts.plural);\n  return "".concat(text, " ").concat(opts.plural);\n});\n\n//# sourceURL=webpack://extenso/./src/write-currency/write.js?')},"./src/write-decimal/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pluralize", function() { return pluralize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "writeDecimalFormal", function() { return writeDecimalFormal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "writeDecimalInformal", function() { return writeDecimalInformal; });\n/* harmony import */ var _write_int__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../write-int */ "./src/write-int.js");\n/* harmony import */ var _get_list__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../get-list */ "./src/get-list.js");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util */ "./src/write-decimal/util.js");\n\n\n\n/**\r\n * Adicionar \'s\' nos finais de determinadas palavras - pluralizar.\r\n *\r\n * @method pluralize\r\n * @param {string} val Um substantivo.\r\n * @param {number} count A quantidade de objeto.\r\n * @returns {string} Palavra pluralizada.\r\n */\n\nvar pluralize = function pluralize(val, count) {\n  return count > 1 ? "".concat(val, "s") : val;\n};\n/**\r\n * Escrever formalmente a parte decimal de um nÃºmero.\r\n *\r\n * @method writeDecimalFormal\r\n * @param {string} int Um nÃºmero inteiro referente ao decimal.\r\n * @param {string} locale CÃ³digo do paÃ­s para escrever o nÃºmero.\r\n * @returns {string} A parte decimal escrita por extenso.\r\n */\n\nvar writeDecimalFormal = function writeDecimalFormal(int, locale) {\n  // Veja <https://bit.ly/2SrsXVO> (no <archive.org>) para entender tudo.\n  var len = int.length;\n  var intNum = parseInt(int);\n  var intNormalized = int.replace(/^0+/, \'\');\n  var intText = Object(_write_int__WEBPACK_IMPORTED_MODULE_0__["default"])(intNormalized, locale);\n  var intType = pluralize(Object(_util__WEBPACK_IMPORTED_MODULE_2__["getType"])(len), intNum);\n  var intTypeOf = Object(_get_list__WEBPACK_IMPORTED_MODULE_1__["listDecimals"])(locale)[Math.floor(len / 3 - 1)];\n  if (len < 3) return "".concat(intText, " ").concat(intType);\n  if (len % 3 === 0) return "".concat(intText, " ").concat(pluralize(intTypeOf, intNum));\n  return "".concat(intText, " ").concat(intType, " de ").concat(intTypeOf);\n};\n/**\r\n * Escrever informalmente a parte decimal de um nÃºmero.\r\n *\r\n * @method writeDecimalInformal\r\n * @param {string} int Um nÃºmero inteiro referente ao decimal.\r\n * @param {string} locale CÃ³digo do paÃ­s para escrever o nÃºmero.\r\n * @returns {string} A parte decimal escrita por extenso.\r\n */\n\nvar writeDecimalInformal = function writeDecimalInformal(int, locale) {\n  return "v\\xEDrgula ".concat(Object(_write_int__WEBPACK_IMPORTED_MODULE_0__["default"])(int, locale));\n};\n/**\r\n * Escrever a parte decimal de um nÃºmero por extenso.\r\n *\r\n * @method writeDecimal\r\n * @param {string} int Um nÃºmero inteiro referente ao decimal.\r\n * @param {string} locale CÃ³digo do paÃ­s para escrever o nÃºmero.\r\n * @param {string} opt OpÃ§Ã£o informando se Ã© \'formal\' ou \'informal\'.\r\n * @returns {string} A parte decimal escrita por extenso.\r\n */\n\n/* harmony default export */ __webpack_exports__["default"] = (function (int, locale, opt) {\n  return opt && opt === \'informal\' ? writeDecimalInformal(int, locale) : writeDecimalFormal(int, locale);\n});\n\n//# sourceURL=webpack://extenso/./src/write-decimal/index.js?')},"./src/write-decimal/util.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getType\", function() { return getType; });\n/**\r\n * Obter a informaÃ§Ã£o do tipo da casa decimal (dÃ©cimo ou centÃ©simo).\r\n *\r\n * @method getType\r\n * @param {number} place O nÃºmero de casas do valor decimal.\r\n * @returns {string} InformaÃ§Ã£o do tipo da casa.\r\n */\nvar getType = function getType(place) {\n  switch (place % 3) {\n    case 1:\n      return 'dÃ©cimo';\n      break;\n\n    case 2:\n      return 'centÃ©simo';\n      break;\n  }\n};\n\n//# sourceURL=webpack://extenso/./src/write-decimal/util.js?")},"./src/write-int.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toFemale\", function() { return toFemale; });\n/* harmony import */ var _lt1000__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lt1000 */ \"./src/lt1000.js\");\n/* harmony import */ var _gt1000__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gt1000 */ \"./src/gt1000/index.js\");\n\n\n/**\r\n * Passar para o feminino alguns nÃºmeros.\r\n *\r\n * @method toFemale\r\n * @param {string} num Um nÃºmero qualquer.\r\n * @returns {string} O nÃºmero com algumas partes no feminino.\r\n * @example\r\n * toFemale('quarenta e dois')\r\n * // 'quarenta e duas'\r\n */\n\nvar toFemale = function toFemale(num) {\n  return num.replace(/\\bum\\b/, 'uma').replace(/\\bdois\\b/, 'duas');\n};\n/**\r\n * Obter qualquer nÃºmero escrito por extenso.\r\n *\r\n * @method writeInt\r\n * @param {string} int Um nÃºmero para ser escrito.\r\n * @param {string} locale CÃ³digo do paÃ­s para escrever o nÃºmero.\r\n * @param {string} [gender='m'] A opÃ§Ã£o do gÃªnero do nÃºmero.\r\n * @returns {string} O nÃºmero escrito.\r\n */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (function (int, locale) {\n  var gender = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'm';\n  var intNum = parseInt(int);\n  var num;\n  if (intNum < 1000) num = Object(_lt1000__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(intNum, locale);\n  if (intNum === 1000) num = 'mil';\n  if (intNum > 1000) num = Object(_gt1000__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(int, locale);\n  return gender === 'f' ? toFemale(num) : num;\n});\n\n//# sourceURL=webpack://extenso/./src/write-int.js?")}})});